// Code generated by MockGen. DO NOT EDIT.
// Source: database_transaction.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	util "order-service/internal/util"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockDatabaseTransaction is a mock of DatabaseTransaction interface.
type MockDatabaseTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseTransactionMockRecorder
}

// MockDatabaseTransactionMockRecorder is the mock recorder for MockDatabaseTransaction.
type MockDatabaseTransactionMockRecorder struct {
	mock *MockDatabaseTransaction
}

// NewMockDatabaseTransaction creates a new mock instance.
func NewMockDatabaseTransaction(ctrl *gomock.Controller) *MockDatabaseTransaction {
	mock := &MockDatabaseTransaction{ctrl: ctrl}
	mock.recorder = &MockDatabaseTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseTransaction) EXPECT() *MockDatabaseTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockDatabaseTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDatabaseTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDatabaseTransaction)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockDatabaseTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDatabaseTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDatabaseTransaction)(nil).Rollback))
}

// MockDatabaseTransactionHandler is a mock of DatabaseTransactionHandler interface.
type MockDatabaseTransactionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseTransactionHandlerMockRecorder
}

// MockDatabaseTransactionHandlerMockRecorder is the mock recorder for MockDatabaseTransactionHandler.
type MockDatabaseTransactionHandlerMockRecorder struct {
	mock *MockDatabaseTransactionHandler
}

// NewMockDatabaseTransactionHandler creates a new mock instance.
func NewMockDatabaseTransactionHandler(ctrl *gomock.Controller) *MockDatabaseTransactionHandler {
	mock := &MockDatabaseTransactionHandler{ctrl: ctrl}
	mock.recorder = &MockDatabaseTransactionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseTransactionHandler) EXPECT() *MockDatabaseTransactionHandlerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDatabaseTransactionHandler) Begin(ctx context.Context, opts *sql.TxOptions) (util.DatabaseTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx, opts)
	ret0, _ := ret[0].(util.DatabaseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockDatabaseTransactionHandlerMockRecorder) Begin(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDatabaseTransactionHandler)(nil).Begin), ctx, opts)
}

// MockDatabaseTransactionAction is a mock of DatabaseTransactionAction interface.
type MockDatabaseTransactionAction struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseTransactionActionMockRecorder
}

// MockDatabaseTransactionActionMockRecorder is the mock recorder for MockDatabaseTransactionAction.
type MockDatabaseTransactionActionMockRecorder struct {
	mock *MockDatabaseTransactionAction
}

// NewMockDatabaseTransactionAction creates a new mock instance.
func NewMockDatabaseTransactionAction(ctrl *gomock.Controller) *MockDatabaseTransactionAction {
	mock := &MockDatabaseTransactionAction{ctrl: ctrl}
	mock.recorder = &MockDatabaseTransactionActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseTransactionAction) EXPECT() *MockDatabaseTransactionActionMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockDatabaseTransactionAction) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDatabaseTransactionActionMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDatabaseTransactionAction)(nil).ExecContext), varargs...)
}

// NamedExecContext mocks base method.
func (m *MockDatabaseTransactionAction) NamedExecContext(ctx context.Context, query string, args interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExecContext", ctx, query, args)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExecContext indicates an expected call of NamedExecContext.
func (mr *MockDatabaseTransactionActionMockRecorder) NamedExecContext(ctx, query, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExecContext", reflect.TypeOf((*MockDatabaseTransactionAction)(nil).NamedExecContext), ctx, query, args)
}

// QueryRowxContext mocks base method.
func (m *MockDatabaseTransactionAction) QueryRowxContext(ctx context.Context, query string, args ...interface{}) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockDatabaseTransactionActionMockRecorder) QueryRowxContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockDatabaseTransactionAction)(nil).QueryRowxContext), varargs...)
}

// QueryxContext mocks base method.
func (m *MockDatabaseTransactionAction) QueryxContext(ctx context.Context, query string, args ...interface{}) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryxContext indicates an expected call of QueryxContext.
func (mr *MockDatabaseTransactionActionMockRecorder) QueryxContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryxContext", reflect.TypeOf((*MockDatabaseTransactionAction)(nil).QueryxContext), varargs...)
}

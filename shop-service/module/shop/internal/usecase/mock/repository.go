// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	libpagination "shop-service/internal/util/libpagination"
	entity "shop-service/module/shop/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockShopRepository is a mock of ShopRepository interface.
type MockShopRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShopRepositoryMockRecorder
}

// MockShopRepositoryMockRecorder is the mock recorder for MockShopRepository.
type MockShopRepositoryMockRecorder struct {
	mock *MockShopRepository
}

// NewMockShopRepository creates a new mock instance.
func NewMockShopRepository(ctrl *gomock.Controller) *MockShopRepository {
	mock := &MockShopRepository{ctrl: ctrl}
	mock.recorder = &MockShopRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopRepository) EXPECT() *MockShopRepositoryMockRecorder {
	return m.recorder
}

// ListByParams mocks base method.
func (m *MockShopRepository) ListByParams(ctx context.Context, params *entity.ListShopByParams) ([]*entity.Shop, *libpagination.OffsetPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByParams", ctx, params)
	ret0, _ := ret[0].([]*entity.Shop)
	ret1, _ := ret[1].(*libpagination.OffsetPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByParams indicates an expected call of ListByParams.
func (mr *MockShopRepositoryMockRecorder) ListByParams(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByParams", reflect.TypeOf((*MockShopRepository)(nil).ListByParams), ctx, params)
}

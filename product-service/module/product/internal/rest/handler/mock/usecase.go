// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	libpagination "product-service/internal/util/libpagination"
	entity "product-service/module/product/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductUsecase is a mock of ProductUsecase interface.
type MockProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUsecaseMockRecorder
}

// MockProductUsecaseMockRecorder is the mock recorder for MockProductUsecase.
type MockProductUsecaseMockRecorder struct {
	mock *MockProductUsecase
}

// NewMockProductUsecase creates a new mock instance.
func NewMockProductUsecase(ctrl *gomock.Controller) *MockProductUsecase {
	mock := &MockProductUsecase{ctrl: ctrl}
	mock.recorder = &MockProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUsecase) EXPECT() *MockProductUsecaseMockRecorder {
	return m.recorder
}

// CheckProduct mocks base method.
func (m *MockProductUsecase) CheckProduct(ctx context.Context, params *entity.ListProductByParams) ([]*entity.Product, *libpagination.OffsetPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProduct", ctx, params)
	ret0, _ := ret[0].([]*entity.Product)
	ret1, _ := ret[1].(*libpagination.OffsetPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckProduct indicates an expected call of CheckProduct.
func (mr *MockProductUsecaseMockRecorder) CheckProduct(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProduct", reflect.TypeOf((*MockProductUsecase)(nil).CheckProduct), ctx, params)
}
